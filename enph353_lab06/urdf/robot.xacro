<?xml version='1.0'?>

<robot name="robot" xmlns:xacro="http://www.ros.org/wiki/xacro">

  <xacro:property name="chassis_width" value="0.15"/>
  <xacro:property name="chassis_length" value="0.2"/>
  <xacro:property name="chassis_height" value="0.05"/>
  <xacro:property name="chassis_mass" value="0.5"/>

  <xacro:property name="wheel_radius" value="0.04"/>
  <xacro:property name="wheel_width" value="0.03"/>
  <xacro:property name="wheel_mass" value="0.1"/>

  <xacro:property name="camera_mass" value="0.01"/>
  <xacro:property name="camera_side_length" value="0.04"/>

  <xacro:include filename="$(find enph353_ros_lab)/urdf/macros.xacro" />

  <!--CHASSIS-->
  <link name='chassis'>

    <xacro:box_inertial name="chassis" m="${chassis_mass}" x="${chassis_length}" y="${chassis_width}" z="${chassis_height}"/>

    <collision name='chassis_collision'>
      <geometry>
        <box size="${chassis_length} ${chassis_width} ${chassis_height}"/>
      </geometry>
    </collision>

    <visual name='chassis_visual'>
      <origin xyz="0 0 0" rpy=" 0 0 0"/>
      <geometry>
        <box size="${chassis_length} ${chassis_width} ${chassis_height}"/>
      </geometry>
    </visual>

  </link>

  <!--WHEELS-->
  <!--Left Front Wheel-->
  <link name='leftFrontWheel'>

    <xacro:cylinder_inertial name="leftFrontWheel" m="${wheel_mass}" r ="${wheel_radius}" h = "${wheel_width}"/>

    <collision name='leftFrontWheel_collision'>
      <origin xyz="0 0 0" rpy="1.5707 1.5707 0"/>
      <geometry>
        <cylinder radius ="${wheel_radius}" length = "${wheel_width}"/>
      </geometry>
    </collision>

    <visual name='leftFrontWheel_visual'>
      <origin xyz="0 0 0" rpy="1.5707 1.5707 0"/>
      <geometry>
        <cylinder radius ="${wheel_radius}" length = "${wheel_width}"/>
      </geometry>
    </visual>

  </link>

  <!--Right Front Wheel-->
  <link name='rightFrontWheel'>

    <xacro:cylinder_inertial name="rightFrontWheel" m="${wheel_mass}" r ="${wheel_radius}" h = "${wheel_width}"/>

    <collision name='rightFrontWheel_collision'>
      <origin xyz="0 0 0" rpy="1.5707 1.5707 0"/>
      <geometry>
        <cylinder radius ="${wheel_radius}" length = "${wheel_width}"/>
      </geometry>
    </collision>

    <visual name='rightFrontWheel_visual'>
      <origin xyz="0 0 0" rpy="1.5707 1.5707 0"/>
      <geometry>
        <cylinder radius ="${wheel_radius}" length = "${wheel_width}"/>
      </geometry>
    </visual>

  </link>

  <!--Left Back Wheel-->
  <link name='leftBackWheel'>

    <xacro:cylinder_inertial name="leftBackWheel" m="${wheel_mass}" r ="${wheel_radius}" h = "${wheel_width}"/>

    <collision name='leftBackWheel_collision'>
      <origin xyz="0 0 0" rpy="1.5707 1.5707 0"/>
      <geometry>
        <cylinder radius ="${wheel_radius}" length = "${wheel_width}"/>
      </geometry>
    </collision>

    <visual name='leftBackWheel_visual'>
      <origin xyz="0 0 0" rpy="1.5707 1.5707 0"/>
      <geometry>
        <cylinder radius ="${wheel_radius}" length = "${wheel_width}"/>
      </geometry>
    </visual>

  </link>

  <!--Right Back Wheel-->
  <link name='rightBackWheel'>

    <xacro:cylinder_inertial name="rightBackWheel" m="${wheel_mass}" r ="${wheel_radius}" h = "${wheel_width}"/>

    <collision name='rightBackWheel_collision'>
      <origin xyz="0 0 0" rpy="1.5707 1.5707 0"/>
      <geometry>
        <cylinder radius ="${wheel_radius}" length = "${wheel_width}"/>
      </geometry>
    </collision>

    <visual name='rightBackWheel_visual'>
      <origin xyz="0 0 0" rpy="1.5707 1.5707 0"/>
      <geometry>
        <cylinder radius ="${wheel_radius}" length = "${wheel_width}"/>
      </geometry>
    </visual>

  </link>

  <!--CAMERA OBJECT-->
  <link name='cameraBox'>

    <xacro:box_inertial name="cameraBox" m="${camera_mass}" x="${camera_side_length}" y="${camera_side_length}" z="${camera_side_length}"/>

    <collision name='cameraBox_collision'>
      <geometry>
        <origin xyz="0 0 0" rpy=" 0 0 0"/>
        <box size="${camera_side_length} ${camera_side_length} ${camera_side_length}"/>
      </geometry>
    </collision>

    <visual name='cameraBox_visual'>
      <origin xyz="0 0 0" rpy=" 0 0 0"/>
      <geometry>
        <box size="${camera_side_length} ${camera_side_length} ${camera_side_length}"/>
      </geometry>
    </visual>

  </link>

  <!--============================================================================-->

  <!--WHEEL JOINTS-->
  <!--Chassis and Left Front Wheel Joint-->
  <joint name="chassis_leftFrontWheel" type="continuous">
    <origin xyz="0.06 0.09 0.002" rpy="0 0 0"/>
    <axis xyz="0 1 0"/>

    <parent link="chassis"/>
    <child link="leftFrontWheel"/>
   
  </joint>

  <!--Chassis and Right Front Wheel Joint-->
  <joint name="chassis_rightFrontWheel" type="continuous">
    <origin xyz="0.06 -0.09 0.002" rpy="0 0 0"/>
    <axis xyz="0 1 0"/>

    <parent link="chassis"/>
    <child link="rightFrontWheel"/>
   
  </joint>

  <!--Chassis and Left Back Wheel Joint-->
  <joint name="chassis_leftBackWheel" type="continuous">
    <origin xyz="-0.06 0.09 0.002" rpy="0 0 0"/>
    <axis xyz="0 1 0"/>

    <parent link="chassis"/>
    <child link="leftBackWheel"/>
   
  </joint>

  <!--Chassis and Left Back Wheel Joint-->
  <joint name="chassis_rightBackWheel" type="continuous">
    <origin xyz="-0.06 -0.09 0.002" rpy="0 0 0"/>
    <axis xyz="0 1 0"/>

    <parent link="chassis"/>
    <child link="rightBackWheel"/>
   
  </joint>

  <!--CAMERA JOINT-->
  <joint name="chassis_camera" type="fixed">
    <origin xyz="0.1 0 0.045" rpy="0 0 0"/>

    <parent link="chassis"/>
    <child link="cameraBox"/>
   
  </joint>
  
  <!--============================================================================-->
  <!--PLUGINS-->

  <!--Robot driver plugin-->
  <gazebo>
    <plugin name="skid_steer_drive_controller" filename="libgazebo_ros_skid_steer_drive.so">
      <updateRate>30.0</updateRate>
      <robotNamespace>/</robotNamespace>

      <leftFrontJoint>chassis_leftFrontWheel</leftFrontJoint>
      <rightFrontJoint>chassis_rightFrontWheel</rightFrontJoint>
      <leftRearJoint>chassis_leftBackWheel</leftRearJoint>
      <rightRearJoint>chassis_rightBackWheel</rightRearJoint>

      <wheelSeparation>0.18</wheelSeparation>
      <wheelDiameter>0.08</wheelDiameter>

      <robotBaseFrame>chassis</robotBaseFrame>
      <torque>20</torque>
      <topicName>cmd_vel</topicName>
      <broadcastTF>false</broadcastTF>
    </plugin>
    
    <plugin name="joint_state_publisher" filename="libgazebo_ros_joint_state_publisher.so">
      <jointName>chassis_leftFrontWheel,chassis_rightFrontWheel,chassis_leftBackWheel,chassis_rightBackWheel</jointName>
      <updateRate>30.0</updateRate>
      <alwaysOn>true</alwaysOn>
    </plugin>
  </gazebo>

  <!--Camera Plugin-->
  <gazebo reference="cameraBox">
    <sensor type="camera" name="camera1">
      <update_rate>30.0</update_rate>
      <camera name="head">
        <horizontal_fov>1.3962634</horizontal_fov>
        <image>
          <width>800</width>
          <height>800</height>
          <format>R8G8B8</format>
        </image>
        <clip>
          <near>0.02</near>
          <far>300</far>
        </clip>
        <noise>
          <type>gaussian</type>
          <!-- Noise is sampled independently per pixel on each frame.
               That pixel's noise value is added to each of its color
               channels, which at that point lie in the range [0,1]. -->
          <mean>0.0</mean>
          <stddev>0.007</stddev>
        </noise>
      </camera>
      <plugin name="camera_controller" filename="libgazebo_ros_camera.so">
        <alwaysOn>true</alwaysOn>
        <updateRate>0.0</updateRate>
        <cameraName>camera1</cameraName>
        <imageTopicName>image_raw</imageTopicName>
        <cameraInfoTopicName>camera_info</cameraInfoTopicName>
        <frameName>cameraBox</frameName>
        <hackBaseline>0.07</hackBaseline>
        <distortionK1>0.0</distortionK1>
        <distortionK2>0.0</distortionK2>
        <distortionK3>0.0</distortionK3>
        <distortionT1>0.0</distortionT1>
        <distortionT2>0.0</distortionT2>
      </plugin>
    </sensor>
  </gazebo>
</robot>
